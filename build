#!/bin/bash

set -euo pipefail

if [[ $# -eq 0 ]]; then
    echo "Specify the Minecraft Mainline Server Version or "latest" for the latest version.
    If the version ends in -forge or -neoforge then the (neo)forge server will be built"
    exit 0
fi

if ! command -v curl &> /dev/null; then
    echo "Install curl by running 'sudo apt install curl'"
    exit 1
fi

if ! command -v jq &> /dev/null; then
    echo "Install jq by running 'sudo apt install jq'"
    exit 1
fi

MAINLINE_VERSIONS_JSON="https://launchermeta.mojang.com/mc/game/version_manifest.json"
FORGE_VERSIONS_JSON=http://files.minecraftforge.net/maven/net/minecraftforge/forge/promotions_slim.json
NEOFORGE_VERSIONS_JSON=https://maven.neoforged.net/api/maven/versions/releases/net/neoforged/neoforge

VERSION_TAG=$1

if [[ $VERSION_TAG == *-forge ]]; then
    MAINLINE_VERSION=${VERSION_TAG%-forge}
    mod="forge"
elif [[ $VERSION_TAG == *-neoforge ]]; then
    MAINLINE_VERSION=${VERSION_TAG%-neoforge}
    mod="neoforge"
else
    MAINLINE_VERSION="$VERSION_TAG"
    mod=""
fi

if [[ $MAINLINE_VERSION == "latest" ]]; then
    MAINLINE_VERSION=$(curl -fsSL $VERSIONS_JSON | jq -r '.latest.release')
fi

echo "Checking the version ..."
# check if the version is valid for the mainline server (prereq for forge as well)
MAINLINE_URL=$(curl -s $MAINLINE_VERSIONS_JSON | jq --arg VERSION "$MAINLINE_VERSION" --raw-output '[.versions[]|select(.id == $VERSION)][0].url')
MAINLINE_VERSIONS=$(curl -s $MAINLINE_VERSIONS_JSON | jq -r '.versions[]|select(.type == "release").id' | sort -u --version-sort | sed -z 's/\n/, /g;s/, $//' )

if [[ "$MAINLINE_URL" == "null" ]]; then
   echo -e "No such version $MAINLINE_VERSION for the mainline server. Available options: $MAINLINE_VERSIONS\n"
   exit 1
fi

# check if the forge version for this serevr exists
if [[ $mod == "forge" ]]; then
    MOD_VERSION=$(curl -fsSL $FORGE_VERSIONS_JSON | jq -r ".promos[\"$MAINLINE_VERSION-latest\"]")
    if [ $MOD_VERSION = null ]; then
        FORGE_SUPPORTED_VERSIONS=$(curl -fsSL $FORGE_VERSIONS_JSON | jq -r '.promos| keys[] | rtrimstr("-latest") | rtrimstr("-recommended")' | sort -u --version-sort | sed -z 's/\n/-forge, /g' | sed 's/, $//')
        echo -e "Version $MAINLINE_VERSION is not supported by Forge. Supported versions: $FORGE_SUPPORTED_VERSIONS\n"
        exit 2
    fi
elif [[ $mod == "neoforge" ]]; then
    MOD_VERSION=$(curl -fsSL $NEOFORGE_VERSIONS_JSON | jq -r '.versions[]' | { grep "${MAINLINE_VERSION:2}" || true; } | sort --version-sort | tail -1)
    if [[ -z $MOD_VERSION ]]; then
        NEOFORGE_SUPPORTED_VERSIONS=$(curl -fsSL $NEOFORGE_VERSIONS_JSON | jq -r '.versions[]' | sed -r 's/([0-9]+\.[0-9]+).*/\1/;s/^/1./' | sort -Vu | sed -z 's/\n/-neoforge, /g' | sed 's/, $//')
        echo -e "Version $MAINLINE_VERSION is not supported by NeoForge. Supported versions: $NEOFORGE_SUPPORTED_VERSIONS\n"
    fi
else
    MOD_VERSION="" # create the var to use in the docker build
fi

echo "Preparing the context..."

if [[ $mod == "forge" || $mod == "neoforge" ]]; then
    verfolder=".build-cache/server-$MAINLINE_VERSION-$mod"
    mkdir -p $verfolder
    cd $verfolder
    ../../download-$mod-server.sh $MAINLINE_VERSION
else
    verfolder=".build-cache/server-$MAINLINE_VERSION"
    mkdir -p "$verfolder/libraries"
    cd $verfolder
    ../../download-minecraft-server.sh $MAINLINE_VERSION
fi

cd ../..
cp -a minecraft-server.sh "$verfolder"

# use dynamic tagging to switch base images
version_slug=$(echo $MAINLINE_VERSION | cut -d . -f 2)
if [[ $version_slug -le 16 ]]; then
    docker pull openjdk:8-jre-alpine
    docker tag openjdk:8-jre-alpine java-base-image
elif [[ $version_slug -le 17 ]]; then
    docker pull openjdk:16-alpine
    docker tag openjdk:16-alpine java-base-image
elif [[ $version_slug -lt 21 ]]; then
    docker pull openjdk:17-alpine
    docker tag openjdk:17-alpine java-base-image
else
    docker pull azul/zulu-openjdk-alpine:21-latest #openjdk:21-slim
    docker tag azul/zulu-openjdk-alpine:21-latest java-base-image
fi

docker build $verfolder -f ./Dockerfile -t alexivkin/minecraft-server:$VERSION_TAG --build-arg MOD_INSTALLER="$mod-$MAINLINE_VERSION-$MOD_VERSION-installer.jar"

if [[ $VERSION_TAG == latest* ]]; then
    # add a tag with the actual version
    if [[ $mod == "forge" || $mod == "neoforge" ]]; then
        docker tag alexivkin/minecraft-server:$VERSION_TAG alexivkin/minecraft-server:$MAINLINE_VERSION-$mod
    else
        docker tag alexivkin/minecraft-server:$VERSION_TAG alexivkin/minecraft-server:$MAINLINE_VERSION
    fi
fi

#rm -rf $verfolder
echo "done"
